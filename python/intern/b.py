"""
Известная компания Тындекс идёт в ногу со временем — с началом активных космических перелётов в компании открылся сервис Тындекс.Ракетакси: пользователю необходимо лишь указать координаты начала и конца перелёта, после чего за ним вылетит персональная ракета.
По сути любой заказ можно описать в виде событий четырёх типов:

A (accepted) - заказ принят в работу (ракета вылетела за клиентом);
B (boarding) - клиент сел в ракету;
S (success) - заказ успешно завершён (клиент вышел на планете назначения);
C (cancelled) - заказ отменён.
Все происходящие с ракетами события отправляются на сервера, где сразу логируются. Вот только из-за проблем со связью (метеоритные потоки, вспышки на звездах и т.д.) отправка событий иногда затягивается, из-за чего записи в получившемся логе могут идти не по порядку.
Гарантируется, что все описанные в логе события задают один из следующих сценариев:

A - B - S
A - B - C
A - C
Вам, как главному аналитику (и по совместительству главному программисту) ракетопарка, необходимо исследовать лог за прошедший год и определить для каждой ракеты суммарное время движения (в минутах) в течение заказов.
В каждый момент времени ракета выполняет только один заказ. Будем считать, что каждая ракета в каждый момент времени:

или стоит на месте в ожидании заказа,
или перемещается по космосу, выполняя заказ.
Движение начинается после принятия заказа и завершается после отмены или завершения заказа. За одну минуту не может произойти несколько событий, связанных с одной и той же ракетой.
"""
def calculate_rocket_time(log):
    log.sort()
    rockets_time = {}
    for timestamp, status, id in log:
        if id not in rockets_time:
            rockets_time[id] = (0, 0)
        # Порядок гарантирвоан
        if status == 'A':
            rockets_time[id] = (rockets_time[id][0], timestamp)
        elif status in ('S', 'C'):
            rockets_time[id] = (
                rockets_time[id][0] + timestamp - rockets_time[id][1],
                0
            )

    return [str(rockets_time[id][0]) for id in sorted(rockets_time.keys())]


def read_input():
    n = int(input())
    log = [
        (lambda d, h, m, i, s: (int(d)*24*60 + int(h)*60 + int(m), s, int(i)))(
            *input().strip().split()
        )
        for _ in range(n)
    ]
    return log


if __name__ == '__main__':
    print(' '.join(calculate_rocket_time(read_input())))
