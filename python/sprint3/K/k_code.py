"""
Гоше дали задание написать красивую сортировку слиянием. Поэтому Гоше
обязательно надо реализовать отдельно функцию merge и функцию merge_sort.
Функция merge принимает два отсортированных массива, сливает их в один
отсортированный массив и возвращает его. Если требуемая сигнатура имеет вид
merge(array, left, mid, right), то первый массив задаётся полуинтервалом
[left,mid) массива array,
а второй – полуинтервалом [mid,right) массива array.

Функция merge_sort принимает некоторый подмассив, который нужно отсортировать.
Подмассив задаётся полуинтервалом — его началом и концом. Функция должна
отсортировать передаваемый в неё подмассив, она ничего не возвращает.

Функция merge_sort разбивает полуинтервал на две половинки и рекурсивно
вызывает сортировку отдельно для каждой. Затем два отсортированных массива
сливаются в один с помощью merge. Заметьте, что в функции передаются именно
полуинтервалы [begin,end), то есть правый конец не включается.
Например, если вызвать merge_sort(arr, 0, 4), где
arr=[4,5,3,0,1,2], то будут отсортированы только первые четыре элемента,
изменённый массив будет выглядеть как
arr=[0,3,4,5,1,2].

Реализуйте эти две функции.
Мы рекомендуем воспользоваться заготовками кода для данной задачи,
расположенными по ссылке.

Формат ввода
Передаваемый в функции массив состоит из целых чисел,
не превосходящих по модулю 10^9. Длина сортируемого диапазона
не превосходит 10^5.

Формат вывода
При написании и отправке решений соблюдайте следующие правила:
Отправляйте решение в виде файла. Если текст решения будет вставлен в форму,
то будет возвращена ошибка. В качестве компилятора выберите  Make.
"""
from typing import List


def merge(arr: List[int], lf: int, mid: int, rg: int) -> List[int]:
    left_array = arr[lf: mid]
    right_array = arr[mid: rg]

    l, r, k = 0, 0, lf
    while l < len(left_array) and r < len(right_array):
        if left_array[l] <= right_array[r]:
            arr[k] = left_array[l]
            l += 1
        else:
            arr[k] = right_array[r]
            r += 1
        k += 1

    while l < len(left_array):
        arr[k] = left_array[l]
        l += 1
        k += 1
    while r < len(right_array):
        arr[k] = right_array[r]
        r += 1
        k += 1
    return arr


def merge_sort(arr: List[int], lf: int, rg: int) -> None:
    if rg - lf <= 1:
        return
    else:
        mid = (lf + rg) // 2
        merge_sort(arr, lf, mid)
        merge_sort(arr, mid, rg)
        merge(arr, lf, mid, rg)


def test() -> None:
    a = [1, 4, 9, 2, 10, 11]
    b = merge(a, 0, 3, 6)
    expected = [1, 2, 4, 9, 10, 11]
    assert b == expected
    c = [1, 4, 2, 10, 1, 2]
    merge_sort(c, 0 , 6)
    expected = [1, 1, 2, 2, 4, 10]
    assert c == expected

if __name__ == '__main__':
    test()