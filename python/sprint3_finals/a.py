"""
Алла ошиблась при копировании из одной структуры данных в другую.
Она хранила массив чисел в кольцевом буфере. Массив был отсортирован
по возрастанию, и в нём можно было найти элемент за логарифмическое время.
Алла скопировала данные из кольцевого буфера в обычный массив, но сдвинула
данные исходной отсортированной последовательности. Теперь массив не является
отсортированным. Тем не менее, нужно обеспечить возможность находить в нем
элемент за O(logn).
Можно предполагать, что в массиве только уникальные элементы.
Задачу необходимо сдавать с компилятором Make, он выбран по умолчанию,
других компиляторов в задаче нет. Решение отправляется файлом.
Требуемые сигнатуры функций лежат в заготовках кода на диске.

Формат ввода
Функция принимает массив натуральных чисел и искомое число k.
Длина массива не превосходит 10000.
Элементы массива и число k не превосходят по значению 10000.

В примерах:
В первой строке записано число n –— длина массива.
Во второй строке записано положительное число k –— искомый элемент.
Далее в строку через пробел записано n натуральных чисел – элементы массива.

Формат вывода
Функция должна вернуть индекс элемента, равного k, если такой есть
в массиве (нумерация с нуля).
Если элемент не найден, функция должна вернуть −1.
Изменять массив нельзя.
Для отсечения неэффективных решений ваша функция будет запускаться
от 100000 до 1000000 раз.
"""
from typing import List


def search(nums: List[int], target: int, left: int, right: int) -> int:

    i = (left + right) // 2
    if nums[i] == target:
        return i

    if left >= right:
        return -1

    if (nums[left] <= target <= nums[i - 1]
            or (nums[i + 1] <= nums[right] and target < nums[i + 1])):
        return search(nums, target, left, i-1)
    else:
        return search(nums, target, i+1, right)


def broken_search(nums: List[int], target: int) -> int:
    return search(nums, target, 0, len(nums)-1)
